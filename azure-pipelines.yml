# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:

- script: |
    echo "Setting up vhd availability (Optional)"
    az login -u $(client-id) -p $(client-secret)
    wget https://aka.ms/downloadazcopy-v10-linux -O azcopy.tar.gz && tar -C /tmp -xvzf azcopy.tar.gz
    SAS_TOKEN=$(az storage container generate-sas --account-name $(storage-account) --name $(container-name) --permissions acdlrw --expiry $(date -d "+2 days" '+%Y-%m-%dT%H:%M:%SZ'))
    /tmp/azcopy_linux_*/azcopy copy "$(blob-sas-uri)" "$BLOB_URI?$SAS_TOKEN"
  displayName: 'copy vhd sas to current subscription'
  enabled: true

- script: |
    echo "Setting up Terraform"
    cd azure/
    terraform init
  displayName: 'Setup Terraform environment'

- script: |
      cd azure/
      terraform plan
      terraform apply -auto-approve
  env:
    TF_VAR_image_name: $(image-name)
    TF_VAR_blob_uri: $(blob-uri)
    TF_VAR_file_uris: $(file-uris)
    TF_VAR_vhd_name: $(vhd-name)
    TF_VAR_testing_rg: image-testing-$(Agent.Id)
    ARM_CLIENT_ID: $(client-id)
    ARM_CLIENT_SECRET: $(client-secret)
    ARM_SUBSCRIPTION_ID: $(subscription-id)
    ARM_TENANT_ID: $(tenant-id)

  displayName: 'Deploy Azure Resources with Terraform'

- script: |
      cd azure/
      terraform destroy -auto-approve
  env:
    TF_VAR_image_name: $(image-name)
    TF_VAR_blob_uri: $(blob_uri)
    TF_VAR_file_uris: $(file-uris)
    TF_VAR_vhd_name: $(vhd-name)
    TF_VAR_testing_rg: image-testing-$(Agent.Id)
    ARM_CLIENT_ID: $(client-id)
    ARM_CLIENT_SECRET: $(client-secret)
    ARM_SUBSCRIPTION_ID: $(subscription-id)
    ARM_TENANT_ID: $(tenant-id)
  displayName: 'Destroy Azure Resources with Terraform'
  enabled: true
  condition: always()

