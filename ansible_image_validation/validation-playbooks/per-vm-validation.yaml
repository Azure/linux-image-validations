###
# This Playbook runs validations which are specific to a VM and 
# doesn't depend on which region the VM is deployed in.
###

---
- name: Set image properties
  set_fact:
    err_folder: /tmp/err
    admin_user: "{{ lookup('env', 'ADMIN_USER_NAME') }}"

#TODO : commenting for now, as this check if failing for rhel7
# - name: Check if Grubenv file is symlink
#   shell: |
#     if [[ -L "/boot/grub2/grubenv" ]]; then   
#       echo "Grubenv file is symlink" >> {{err_folder}}/err_msgs.log
#     fi
#   ignore_errors: yes

- name: Compare RHEL version with the expected RHEL version in the pipeline
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "RHEL version mismatch: Expected RHEL version: {{rhel_version}}, current RHEL version: {{ansible_distribution_version}} "
    create: yes
    state: present
  when: "ansible_distribution_version != rhel_version"

- name: Check number of users on the machine
  shell: getent passwd {1000..60000} | grep -v {{ admin_user }} | wc -l
  register: users_on_machine
  ignore_errors: yes

- name: Collect list of all installed packages
  package_facts:
    manager: "auto"

- name: Check if cloud-init is installed
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "'cloud-init' not found"
    create: yes
    state: present
  when: "'cloud-init' not in ansible_facts.packages"

- name: Write to error msg if repolist failed
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "Additional users found on the machines"
    create: yes
    state: present
  when: users_on_machine.stdout_lines[0] != '0'

- name: check if ADE validation is valid for this vm
  include_tasks: validation-playbooks/ade_packages_validation.yaml
  ignore_errors: yes
  when: ansible_os_family == "RedHat" and (ansible_distribution_major_version == '8' or ansible_distribution_major_version == '7') and (repo_type == 'base' or repo_type =='beta')

- name: Check if blacklisted drivers are blacklisted by modprobe service
  include_tasks: validation-playbooks/blacklisted_drivers_validation.yaml
  ignore_errors: yes
  when: ansible_os_family == "RedHat"

- name: Check if the initramfs file is present
  stat: path=/boot/initramfs-{{ ansible_facts.kernel }}.img
  register: initramfs_present
  when: isCVM is false

- name: "Write to error msg if initramfs files are not present"
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "\n boot validation failed since initramfs file is not present."
    create: yes
    state: present 
  when: isCVM is false and initramfs_present.stat.exists == false

- name: Check for NVME/PCI Drivers in image
  when: isCVM is false and initramfs_present.stat.exists == true
  block:
  - name: Check if the nvme driver is present in all images
    shell: lsinitrd /boot/initramfs-{{ ansible_facts.kernel }}.img | grep nvme
    register: check_nvme_allimages

  - debug:
      var: check_nvme_allimages

  - name: "Write to error msg if some drivers are not present"
    lineinfile:
      path: "{{err_folder}}/err_msgs.log"
      line: "\n NVME validation failed since nvme driver is not present. "
      create: yes
      state: present 
    when: ("nvme" not in check_nvme_allimages.stdout)

  - name: Check if the pci driver is present in all images
    shell: lsinitrd /boot/initramfs-{{ ansible_facts.kernel }}.img | grep pci
    register: check_pci_allimages

  - debug:
      var: check_pci_allimages

  - name: "Write to error msg if some drivers are not present"
    lineinfile:
      path: "{{err_folder}}/err_msgs.log"
      line: "\n NVME validation failed since pci driver is not present. "
      create: yes
      state: present 
    when: ("pci" not in check_pci_allimages.stdout)

- name: Check for Rhui client package in the image
  when: license_type != 'byol'
  block:
  - name: Gather the package facts
    ansible.builtin.package_facts:
      manager: auto

  - name: Check for rhui package details
    set_fact:
      rhui_package: "{{ ansible_facts.packages | dict2items | selectattr('key', 'match', 'rhui-azure-rhel') }}"

  - name: Check for rhui package count
    set_fact:
      rhui_package_count : "{{ rhui_package | count }}"

  - name: Check for rhui package details
    debug:
      var: "{{ item }}"
    with_items:
      - rhui_package
      - rhui_package_count

  - name: Log error in case rhui package isn't installed
    lineinfile:
      path: "{{err_folder}}/err_msgs.log"
      line: "Rhui Client package is not installed in the image"
      create: yes
      state: present
    when: rhui_package_count == "0" and offer_type !='byol'

  - name: Set the variable if rhui client package is found
    set_fact:
      is_rhui_package_present : true
    when: rhui_package_count != "0"

##Repo Validation Task

- name: Check if more than 1 client package is present in the RHEL Image
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "\n  The RHEL Image contains more than 1 client package"
    create: yes
    state: present 
  when: rhui_package_count > "1"

- name: Check if offertype is equal to byol and client package is present
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "\n  Client Package is present in BYOL Offertype Image. Details of the client package {{ rhui_package }}"
    create: yes
    state: present 
  when: offer_type =='byol' and rhui_package_count != "0"

- name: Check if the correct client package is present according to the architecture type
  ansible.builtin.shell:
    cmd: |
      #!/bin/bash
          if [[ "{{ architecture }}" -eq "arm64" ]]; then                                            ## This if block refers to the check for the client packages of arm64 architecture type.  The client packages of arm64 architecture is arm64  will contain arm64 as a substring.Example client package: "rhui-azure-rhel9-eus-arm64-2.3-655.noarch","rhui-azure-rhel9-arm64-2.3-655.noarch"
                check_correctness=$( rpm -qa | grep arm64 ) 
                if [[ -z "$check_correctness" ]]; then 
                      echo "Client Package does not contain the value of arm64 architecture type."
                else
                      echo "Client Package contains the value of arm64 architecture type."                
                fi 
          else
                check_correctness=$( rpm -qa | grep arm64 ) 
                if [[ -z "$check_correctness" ]]; then 
                      echo "Correct Client Package is correct. It does not contain the value of arm64 architecture type"
                else
                      echo "Client Package according to the given architecture type. It contains the value of arm64 architecture type"               ## This if block refers to the check for the client packages of x86-64 architecture type. The client packages of x86-64 architecture type don't contain arm64 as a substring.Example client package: "rhui-azure-rhel9-eus-2.3-655.noarch","rhui-azure-rhel9-2.3-655.noarch"
                fi 
          fi                            
  register: output_offertype_except_byol
  when: offer_type !='byol'                       

- debug:
    var: output_offertype_except_byol 

- name: Check if the client package is present according to the offertype when offertype is not equal to byol.
  ansible.builtin.shell:
    cmd: |
      #!/bin/bash
          client_package=$( rpm -qa | grep rhui )                                      ## Value of client package is getting calculated
          if [[ "{{ architecture }}" -eq "arm64" ]]; then                              
              substring="arm64-"                                                       
              clientpkgwithoutarchitecture="${client_package//$substring/}"            ## The arm64 substing is removed so that common validation logic can be used for the client packages of both the types of architectures.
              client_package=$clientpkgwithoutarchitecture                            
          fi                            
                                                          
                      
              package_type=$(echo $client_package | sed 's/-[0-9]\+\.[0-9]\+-[0-9]\+\.noarch//')                            ## Eliminate the suffix  "-2.3-5343.noarch.rpm"  from client package. Remaining value should be equal to "rhui-azure-rhel8" + "offertype" | Examples: "rhui-azure-rhel8", "rhui-azure-rhel8-eus", "rhui-azure-rhel8-sap-ha"
              prefix=$(echo $client_package | sed -E 's/^([^-]+-[^-]+-[^-]+)-.*/\1/')                                       ## Extract prefix rhui-azure-rhel8"  value from client package
              extract_offer_val=$(echo $package_type | sed "s/$prefix//")                                                   ## For Base Offertype, extract_offer_val should be equal to null.


              offertype={{ offer_type }}
              offertype=${offertype//-/}  
              extract_offer_val=${extract_offer_val//-/}

              echo "Print the value of the offertype passed in the pipeline variables: " $offertype
              echo "Print the value of the offertype which is present the client package name: " $extract_offer_val
  
              if [[  $offertype  == "base" ]]; then
                  if [[ -z "$extract_offer_val" ]]; then 
                        echo "Correct Client Package according to the given offertype"
                  else
                        echo "Incorrect Client Package according to the given offertype"        ## This if block refers to the check for the base offertype which is supplied through pipeline variables. The value of extract_offer_val variable should be null. Example of base offertype client package "rhui-azure-rhel9-2.3-655.noarch". It does not contain the value of any offertype of RHEL Images.
                  fi   

              else    
                  if [[ $offertype == $extract_offer_val ]]; then 
                        echo "Correct Client Package according to the given offertype"
                  else
                        echo "Incorrect Client Package according to the given offertype"        ## This else block refers to the check for the remaining offertypes which is supplied through pipeline variables. The value of extract_offer_val variable should not be null.
                  fi   
              fi

  register: output_offertype_except_byol
  when: offer_type !='byol' 

- debug:
    var: output_offertype_except_byol 

- name: "Write to error msg if incorrect client package is present according to the offertype"
  lineinfile:
    path: "{{err_folder}}/err_msgs.log"
    line: "\n Incorrect Client Package is present according to the offertype {{ offer_type }}."
    create: yes
    state: present 
  when: ( offer_type!='byol') and ("Incorrect Client Package according to the given offertype" in output_offertype_except_byol.stdout_lines)  


- name: Check for the Accelerated Networking in Rhel 9 Images.
  when: isCVM is false and ansible_distribution_major_version == '9'
  block:
    - name: Check if the unmanaged devices are present network config of all Rhel 9 Images
      shell: NetworkManager --print-config
      register: check_network_config
  
    - debug:
        var: check_network_config
    
    - name: "Write to error msg if unmanaged drivers are not present"
      lineinfile:
        path: "{{err_folder}}/err_msgs.log"
        line: "\n Accelerated Networking Validation failed since unmanaged drivers are not present."
        create: yes
        state: present 
      when: ("unmanaged-devices=driver:mlx4_core;driver:mlx5_core" not in check_network_config.stdout_lines)    
    
    - name: Check if the accelerated networking config file is present in all Rhel 9 Images
      stat:
        path: /etc/NetworkManager/conf.d/99-azure-unmanaged-devices.conf
      register: check_99_azure_unmanaged_devices_config_file
    
    - debug:
        var: check_99_azure_unmanaged_devices_config_file
    
    - name: "Write to error msg if the file is not present"
      lineinfile:
        path: "./err_msgs.log"
        line: "\n Accelerated Networking Validation failed since unmanaged config file is not present. "
      when: not check_99_azure_unmanaged_devices_config_file.stat.exists    
    
